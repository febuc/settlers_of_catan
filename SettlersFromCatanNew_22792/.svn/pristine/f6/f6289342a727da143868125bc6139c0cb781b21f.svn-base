package gameobjects.Elements;

import gameworld.HexagonField;
import gameworld.WayPoint;
import javafx.application.Platform;
import player.Player;
import tools.BuildingType;
import tools.PlayerTeam;
import tools.ResourceType;
import tools.WorldTranslation;

import java.util.ArrayList;
import java.util.Collections;

import application.GameStart;

/**
 * Simulates a settlement. Gets automatically assigned when creating a wayPoint;
 */
public final class Settlement extends BuildingPrototype {

    /**
     * The wayPoints this object is connected to.
     */
    protected WayPoint wayPoint;

    /**
     * Constructor
     *
     * @param connectionPoint
     */
    public Settlement(WayPoint connectionPoint) {
        setConnectionPoint(connectionPoint);
        wayPoint = connectionPoint;
    }

    /**
     * Upgrades building to a castle.
     */
    public void upgradeToCastle() {
        setBuildingType(BuildingType.CASTLE);
    }

    /**
     * Builds a building if there is no building.
     */
    public void buildVillage(Integer id) {
        //Set owner ID
        setOwnerID(id);
        setBuildingType(BuildingType.VILLAGE);
        System.out.println("Upgraded to village");

    }

    /**
     * Transforms GameCoordinates to ServerCoordinates "Smaller" letters first.
     *
     * @return ServerCoordinates e.g. "ABC"
     */
    public String getTranslatedCoordinates() {
        String posString = "";
        System.out.println("getTranslatedCoordinates from: " + wayPoint);
        ArrayList<HexagonField> wpAFields = wayPoint.getFieldNeighbours();
        ArrayList<String> stringList = new ArrayList<>();
        stringList.add(WorldTranslation.getPositionToLetter(wpAFields.get(0).getPosition().castTo2D()));
        stringList.add(WorldTranslation.getPositionToLetter(wpAFields.get(1).getPosition().castTo2D()));
        stringList.add(WorldTranslation.getPositionToLetter(wpAFields.get(2).getPosition().castTo2D()));
        Collections.sort(stringList);
        posString += stringList.get(0) + stringList.get(1) + stringList.get(2);
        return posString;
    }

    /**
     * Returns if player has enough resources to build building
     */
    @Override
    public boolean hasResourcesToBuildBuilding(Integer playerId) {
        Player player = GameStart.siedlerVonCatan.findPlayerByID(playerId);
        if (player.getStatus().equals("Dorf bauen"))
            return true;
        if (BuildingType.NONE == getBuildingType())
            return player.getNumberOfResource(ResourceType.WOOD) >= 1 && player.getNumberOfResource(ResourceType.LOAM) >= 1
                    && player.getNumberOfResource(ResourceType.WOOL) >= 1 && player.getNumberOfResource(ResourceType.GRAIN) >= 1;
        else if (BuildingType.VILLAGE == getBuildingType())
            return player.getNumberOfResource(ResourceType.STONE) >= 3 && player.getNumberOfResource(ResourceType.GRAIN) >= 2;
        else return false;
    }

    // Getters and Setters
    /**
     * Returns wayPoint this object is connected to
     * @return
     */
    public WayPoint getConnectionPoint() {
        return wayPoint;
    }

    /**
     * Matches way point to building
     * @param connectionPoint
     */
    public void setConnectionPoint(WayPoint connectionPoint) {
        this.wayPoint = connectionPoint;
        if (wayPoint == null)
            try {
                throw new Exception("Waypoint must not be null.");
            } catch (Exception e) {
                e.printStackTrace();
            }
    }
}
