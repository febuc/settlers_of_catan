package view;

import application.GameStart;
import controller.CardController;
import gameobjects.Cards.Card;
import javafx.geometry.Pos;
import javafx.scene.control.Button;
import javafx.scene.effect.DropShadow;
import javafx.scene.image.Image;
import javafx.scene.layout.StackPane;
import javafx.scene.layout.VBox;
import javafx.scene.paint.Color;
import javafx.scene.paint.ImagePattern;
import javafx.scene.shape.Rectangle;
import javafx.scene.text.Font;
import resources.ResourcePointer;

public class CardView {

    private VBox layout;
    private Button cardCount;
    private Button cardImage;

    public CardView(Card card) {
        //Scene height and width
        double sceneHeight = GameStart.gameView.getMainGameScene().getHeight();
        //double sceneWidth = GameStart.gameView.getMainGameScene().getWidth();

        StackPane stackPane = new StackPane();
        layout = new VBox(10);
        layout.setAlignment(Pos.CENTER);
        cardCount = new Button(card.getName());
        cardImage = new Button();
        //Set size
        double height = sceneHeight / 8;
        double length = height / 1.35;
        cardImage.setMinSize(length, height);
        cardImage.setMaxSize(length, height);
        //Shadow
        DropShadow dropShadow = new DropShadow();
        dropShadow.setRadius(4.0);
        dropShadow.setOffsetX(-7.0);
        dropShadow.setOffsetY(8.0);
        dropShadow.setColor(Color.color(0, 0, 0, 0.8));
        //Set button ids
        cardCount.setId("MenuButton");
        // Set up a font
        Font fontBasic = Font.loadFont(ResourcePointer.class.getResource("PaladinFLF.ttf").toExternalForm(),
                height/6.75);
        //Assign shadow
        cardCount.setEffect(dropShadow);
        cardImage.setEffect(dropShadow);
        //Assign font
        cardCount.setFont(fontBasic);
        cardCount.setTextFill(Color.BLACK);
        cardCount.setAlignment(Pos.TOP_CENTER);
        //Add to layout
        stackPane.getChildren().addAll(cardImage);
        layout.getChildren().addAll(stackPane, cardCount);
        //Add controller
        CardController cardController = new CardController(cardImage);
        switch (card.getName()){
        	case("Knight Card"): cardController.defineKnightCardActions(getCardButton());
        		break;
        	case("Road Building Card"): cardController.defineRoadBuildingCardActions(getCardButton());
        		break;
        	case("Monopoly Card"):  cardController.defineMonopolyCardActions(getCardButton());
        		break;
        	case("Year Of Plenty Card"):  cardController.defineYearOfPlentyCardActions(getCardButton());
        		break;
        	case("Victory Point Card"):  cardController.defineVictoryPointCardActions(getCardButton());
        		break;
        }
    }

    /**
     * Updates the label "cardCount" to "newCount".
     *
     * @param newCount
     */
    public void updateCountLabel(int newCount) {
    	cardCount.setText(newCount + "");
    }

    /**
     * Loads a background texture for the button
     *
     * @param imageTexturePath
     */
    public void loadBackground(String imageTexturePath) {
        if (imageTexturePath == "" || imageTexturePath == null)
            return;
        Rectangle rect = new Rectangle(cardImage.getMinWidth() - 5, cardImage.getMinHeight() - 5);
        // Load avatar image
        Image avatarImage = new Image(ResourcePointer.class.getResourceAsStream(imageTexturePath + ".png"));
        // Set image
        rect.setFill((new ImagePattern(avatarImage, 0, 0, 1, 1, true)));
        cardImage.setGraphic(rect);
    }
    //Getters

    /**
     * @return layout
     */
    public VBox getLayout() {
        return layout;
    }

    /**
     * Returns the count as an int
     * @return
     */
	public int countToInt() {
		return Integer.parseInt(cardCount.getText());
	}

	public Button getCardButton() {
		return cardImage;
	}

}
